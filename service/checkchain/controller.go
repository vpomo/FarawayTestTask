// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package checkchain

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// CheckchainMetaData contains all meta data concerning the Checkchain contract.
var CheckchainMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"CollectionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenUri\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenMinted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_baseTokenURI\",\"type\":\"string\"}],\"name\":\"createCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCollections\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"members\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"}],\"name\":\"isCollection\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_baseTokenURI\",\"type\":\"string\"}],\"name\":\"setBaseTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"setCollectionPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801562000010575f80fd5b5062000031620000256200005760201b60201c565b6200005e60201b60201c565b62000051620000456200005760201b60201c565b6200005e60201b60201c565b6200011f565b5f33905090565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050815f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b615e26806200012d5f395ff3fe6080604052600436106200009d575f3560e01c80639dc29fac11620000605780639dc29fac1462000188578063d8a73fdb14620001b5578063ece86c2114620001e2578063ee1fe2ad146200020f578063f2fde38b146200022f576200009d565b806346e6358614620000a15780635fa15ebb14620000d0578063715018a61462000113578063804695af146200012c5780638da5cb5b1462000159575b5f80fd5b348015620000ad575f80fd5b50620000b86200025c565b604051620000c7919062000e6e565b60405180910390f35b348015620000dc575f80fd5b50620000fb6004803603810190620000f5919062000ed0565b6200026f565b6040516200010a919062000f1c565b60405180910390f35b3480156200011f575f80fd5b506200012a6200028d565b005b34801562000138575f80fd5b5062000157600480360381019062000151919062000f6f565b620002a4565b005b34801562000165575f80fd5b506200017062000407565b6040516200017f919062000fc5565b60405180910390f35b34801562000194575f80fd5b50620001b36004803603810190620001ad919062000f6f565b6200042e565b005b348015620001c1575f80fd5b50620001e06004803603810190620001da919062001138565b62000623565b005b348015620001ee575f80fd5b506200020d60048036038101906200020791906200119c565b620006ea565b005b6200022d600480360381019062000227919062001252565b6200079f565b005b3480156200023b575f80fd5b506200025a600480360381019062000254919062000ed0565b620009e3565b005b60606200026a600162000a6c565b905090565b5f6200028682600162000a8d90919063ffffffff16565b9050919050565b6200029762000abc565b620002a25f62000b41565b565b620002ae62000abc565b81620002ba816200026f565b620002fc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002f3906200131b565b60405180910390fd5b5f60035f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905082810362000382576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003799062001389565b60405180910390fd5b8260035f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055507fb556fac599c3c70efb9ab1fa725ecace6c81cc48d1455f886607def065f3e0c0848285604051620003f993929190620013ba565b60405180910390a150505050565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b816200043a816200026f565b6200047c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000473906200131b565b60405180910390fd5b5f8373ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b8152600401620004b89190620013f5565b602060405180830381865afa158015620004d4573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190620004fa919062001426565b90506200050662000c02565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161462000576576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200056d90620014a4565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff166342966c68846040518263ffffffff1660e01b8152600401620005b19190620013f5565b5f604051808303815f87803b158015620005c9575f80fd5b505af1158015620005dc573d5f803e3d5ffd5b505050507fbfa41556980d157c24e8632dbb78958f8759a86b4acdea421f93dc7259fb55db8482856040516200061593929190620014c4565b60405180910390a150505050565b6200062d62000abc565b8162000639816200026f565b6200067b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000672906200131b565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff166330176e13836040518263ffffffff1660e01b8152600401620006b6919062001573565b5f604051808303815f87803b158015620006ce575f80fd5b505af1158015620006e1573d5f803e3d5ffd5b50505050505050565b620006f462000abc565b5f6200070284848462000c09565b90506200071a81600162000c5290919063ffffffff16565b6200075c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620007539062001609565b60405180910390fd5b7f3454b57f2dca4f5a54e8358d096ac9d1a0d2dab98991ddb89ff9ea1746260617818585604051620007919392919062001629565b60405180910390a150505050565b81620007ab816200026f565b620007ed576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620007e4906200131b565b60405180910390fd5b3460035f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054146200086f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200086690620016e6565b60405180910390fd5b5f8373ffffffffffffffffffffffffffffffffffffffff16636a627842846040518263ffffffff1660e01b8152600401620008ab919062000fc5565b6020604051808303815f875af1158015620008c8573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190620008ee91906200171c565b90505f8473ffffffffffffffffffffffffffffffffffffffff1663c87b56dd836040518263ffffffff1660e01b81526004016200092c9190620013f5565b5f60405180830381865afa15801562000947573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f82011682018060405250810190620009719190620017c8565b90508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167ff36e967fc37dc0a7e0a1e6d328aac7e945dfcadb00d552d6bc291bdc1b5f80d38385604051620009d492919062001817565b60405180910390a35050505050565b620009ed62000abc565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160362000a5e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000a5590620018bd565b60405180910390fd5b62000a698162000b41565b50565b60605f62000a7c835f0162000c81565b905060608190508092505050919050565b5f62000ab4835f018373ffffffffffffffffffffffffffffffffffffffff165f1b62000cdc565b905092915050565b62000ac662000c02565b73ffffffffffffffffffffffffffffffffffffffff1662000ae662000407565b73ffffffffffffffffffffffffffffffffffffffff161462000b3f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000b36906200192b565b60405180910390fd5b565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050815f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f33905090565b5f8084848460405162000c1c9062000d67565b62000c2a939291906200194b565b604051809103905ff08015801562000c44573d5f803e3d5ffd5b509050809150509392505050565b5f62000c79835f018373ffffffffffffffffffffffffffffffffffffffff165f1b62000cfc565b905092915050565b6060815f0180548060200260200160405190810160405280929190818152602001828054801562000cd057602002820191905f5260205f20905b81548152602001906001019080831162000cbb575b50505050509050919050565b5f80836001015f8481526020019081526020015f20541415905092915050565b5f62000d09838362000cdc565b62000d5d57825f0182908060018154018082558091505060019003905f5260205f20015f9091909190915055825f0180549050836001015f8481526020019081526020015f20819055506001905062000d61565b5f90505b92915050565b614455806200199c83390190565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f62000dc98262000d9e565b9050919050565b62000ddb8162000dbd565b82525050565b5f62000dee838362000dd0565b60208301905092915050565b5f602082019050919050565b5f62000e128262000d75565b62000e1e818562000d7f565b935062000e2b8362000d8f565b805f5b8381101562000e6157815162000e45888262000de1565b975062000e528362000dfa565b92505060018101905062000e2e565b5085935050505092915050565b5f6020820190508181035f83015262000e88818462000e06565b905092915050565b5f604051905090565b5f80fd5b5f80fd5b62000eac8162000dbd565b811462000eb7575f80fd5b50565b5f8135905062000eca8162000ea1565b92915050565b5f6020828403121562000ee85762000ee762000e99565b5b5f62000ef78482850162000eba565b91505092915050565b5f8115159050919050565b62000f168162000f00565b82525050565b5f60208201905062000f315f83018462000f0b565b92915050565b5f819050919050565b62000f4b8162000f37565b811462000f56575f80fd5b50565b5f8135905062000f698162000f40565b92915050565b5f806040838503121562000f885762000f8762000e99565b5b5f62000f978582860162000eba565b925050602062000faa8582860162000f59565b9150509250929050565b62000fbf8162000dbd565b82525050565b5f60208201905062000fda5f83018462000fb4565b92915050565b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b620010308262000fe8565b810181811067ffffffffffffffff8211171562001052576200105162000ff8565b5b80604052505050565b5f6200106662000e90565b905062001074828262001025565b919050565b5f67ffffffffffffffff82111562001096576200109562000ff8565b5b620010a18262000fe8565b9050602081019050919050565b828183375f83830152505050565b5f620010d2620010cc8462001079565b6200105b565b905082815260208101848484011115620010f157620010f062000fe4565b5b620010fe848285620010ae565b509392505050565b5f82601f8301126200111d576200111c62000fe0565b5b81356200112f848260208601620010bc565b91505092915050565b5f806040838503121562001151576200115062000e99565b5b5f620011608582860162000eba565b925050602083013567ffffffffffffffff81111562001184576200118362000e9d565b5b620011928582860162001106565b9150509250929050565b5f805f60608486031215620011b657620011b562000e99565b5b5f84013567ffffffffffffffff811115620011d657620011d562000e9d565b5b620011e48682870162001106565b935050602084013567ffffffffffffffff81111562001208576200120762000e9d565b5b620012168682870162001106565b925050604084013567ffffffffffffffff8111156200123a576200123962000e9d565b5b620012488682870162001106565b9150509250925092565b5f80604083850312156200126b576200126a62000e99565b5b5f6200127a8582860162000eba565b92505060206200128d8582860162000eba565b9150509250929050565b5f82825260208201905092915050565b7f4661726177617920436f6e74726f6c6c65723a206e6f7420636f6c6c656374695f8201527f6f6e000000000000000000000000000000000000000000000000000000000000602082015250565b5f6200130360228362001297565b91506200131082620012a7565b604082019050919050565b5f6020820190508181035f8301526200133481620012f5565b9050919050565b7f4661726177617920436f6e74726f6c6c65723a2077726f6e67207072696365005f82015250565b5f62001371601f8362001297565b91506200137e826200133b565b602082019050919050565b5f6020820190508181035f830152620013a28162001363565b9050919050565b620013b48162000f37565b82525050565b5f606082019050620013cf5f83018662000fb4565b620013de6020830185620013a9565b620013ed6040830184620013a9565b949350505050565b5f6020820190506200140a5f830184620013a9565b92915050565b5f81519050620014208162000ea1565b92915050565b5f602082840312156200143e576200143d62000e99565b5b5f6200144d8482850162001410565b91505092915050565b7f4661726177617920436f6e74726f6c6c65723a206e6f74206f776e65720000005f82015250565b5f6200148c601d8362001297565b9150620014998262001456565b602082019050919050565b5f6020820190508181035f830152620014bd816200147e565b9050919050565b5f606082019050620014d95f83018662000fb4565b620014e8602083018562000fb4565b620014f76040830184620013a9565b949350505050565b5f81519050919050565b5f5b83811015620015285780820151818401526020810190506200150b565b5f8484015250505050565b5f6200153f82620014ff565b6200154b818562001297565b93506200155d81856020860162001509565b620015688162000fe8565b840191505092915050565b5f6020820190508181035f8301526200158d818462001533565b905092915050565b7f4661726177617920436f6e74726f6c6c65723a206572726f72206372656174655f8201527f6420636f6c6c656374696f6e0000000000000000000000000000000000000000602082015250565b5f620015f1602c8362001297565b9150620015fe8262001595565b604082019050919050565b5f6020820190508181035f8301526200162281620015e3565b9050919050565b5f6060820190506200163e5f83018662000fb4565b818103602083015262001652818562001533565b9050818103604083015262001668818462001533565b9050949350505050565b7f4661726177617920436f6e74726f6c6c65723a2077726f6e67207072696365205f8201527f6f722065746865722076616c7565000000000000000000000000000000000000602082015250565b5f620016ce602e8362001297565b9150620016db8262001672565b604082019050919050565b5f6020820190508181035f830152620016ff81620016c0565b9050919050565b5f81519050620017168162000f40565b92915050565b5f6020828403121562001734576200173362000e99565b5b5f620017438482850162001706565b91505092915050565b5f620017626200175c8462001079565b6200105b565b90508281526020810184848401111562001781576200178062000fe4565b5b6200178e84828562001509565b509392505050565b5f82601f830112620017ad57620017ac62000fe0565b5b8151620017bf8482602086016200174c565b91505092915050565b5f60208284031215620017e057620017df62000e99565b5b5f82015167ffffffffffffffff8111156200180057620017ff62000e9d565b5b6200180e8482850162001796565b91505092915050565b5f6040820190508181035f83015262001831818562001533565b9050620018426020830184620013a9565b9392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f20615f8201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b5f620018a560268362001297565b9150620018b28262001849565b604082019050919050565b5f6020820190508181035f830152620018d68162001897565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725f82015250565b5f6200191360208362001297565b91506200192082620018dd565b602082019050919050565b5f6020820190508181035f830152620019448162001905565b9050919050565b5f6060820190508181035f83015262001965818662001533565b905081810360208301526200197b818562001533565b9050818103604083015262001991818462001533565b905094935050505056fe608060405234801562000010575f80fd5b50604051620044553803806200445583398181016040528101906200003691906200033e565b8282815f90816200004891906200062b565b5080600190816200005a91906200062b565b5050506200007d62000071620000ef60201b60201c565b620000f660201b60201c565b80600d90816200008e91906200062b565b506200009f620000ef60201b60201c565b600c5f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600b819055505050506200070f565b5f33905090565b5f60065f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160065f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6200021a82620001d2565b810181811067ffffffffffffffff821117156200023c576200023b620001e2565b5b80604052505050565b5f62000250620001b9565b90506200025e82826200020f565b919050565b5f67ffffffffffffffff82111562000280576200027f620001e2565b5b6200028b82620001d2565b9050602081019050919050565b5f5b83811015620002b75780820151818401526020810190506200029a565b5f8484015250505050565b5f620002d8620002d28462000263565b62000245565b905082815260208101848484011115620002f757620002f6620001ce565b5b6200030484828562000298565b509392505050565b5f82601f830112620003235762000322620001ca565b5b815162000335848260208601620002c2565b91505092915050565b5f805f60608486031215620003585762000357620001c2565b5b5f84015167ffffffffffffffff811115620003785762000377620001c6565b5b62000386868287016200030c565b935050602084015167ffffffffffffffff811115620003aa57620003a9620001c6565b5b620003b8868287016200030c565b925050604084015167ffffffffffffffff811115620003dc57620003db620001c6565b5b620003ea868287016200030c565b9150509250925092565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806200044357607f821691505b602082108103620004595762000458620003fe565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302620004bd7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000480565b620004c9868362000480565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f620005136200050d6200050784620004e1565b620004ea565b620004e1565b9050919050565b5f819050919050565b6200052e83620004f3565b620005466200053d826200051a565b8484546200048c565b825550505050565b5f90565b6200055c6200054e565b6200056981848462000523565b505050565b5b818110156200059057620005845f8262000552565b6001810190506200056f565b5050565b601f821115620005df57620005a9816200045f565b620005b48462000471565b81016020851015620005c4578190505b620005dc620005d38562000471565b8301826200056e565b50505b505050565b5f82821c905092915050565b5f620006015f1984600802620005e4565b1980831691505092915050565b5f6200061b8383620005f0565b9150826002028217905092915050565b6200063682620003f4565b67ffffffffffffffff811115620006525762000651620001e2565b5b6200065e82546200042b565b6200066b82828562000594565b5f60209050601f831160018114620006a1575f84156200068c578287015190505b6200069885826200060e565b86555062000707565b601f198416620006b1866200045f565b5f5b82811015620006da57848901518255600182019150602085019450602081019050620006b3565b86831015620006fa5784890151620006f6601f891682620005f0565b8355505b6001600288020188555050505b505050505050565b613d38806200071d5f395ff3fe608060405234801561000f575f80fd5b50600436106101a7575f3560e01c80636a627842116100f7578063b88d4fde11610095578063e985e9c51161006f578063e985e9c5146104dd578063eb08ab281461050d578063f2fde38b1461052b578063f77c479114610547576101a7565b8063b88d4fde14610473578063c87b56dd1461048f578063d547cfb7146104bf576101a7565b80638462151c116100d15780638462151c146103eb5780638da5cb5b1461041b57806395d89b4114610439578063a22cb46514610457576101a7565b80636a6278421461038157806370a08231146103b1578063715018a6146103e1576101a7565b80632f745c591161016457806342966c681161013e57806342966c68146102e75780634f6ccce71461030357806354fd4d50146103335780636352211e14610351576101a7565b80632f745c591461027f57806330176e13146102af57806342842e0e146102cb576101a7565b806301ffc9a7146101ab57806306fdde03146101db578063081812fc146101f9578063095ea7b31461022957806318160ddd1461024557806323b872dd14610263575b5f80fd5b6101c560048036038101906101c0919061277c565b610565565b6040516101d291906127c1565b60405180910390f35b6101e3610576565b6040516101f09190612864565b60405180910390f35b610213600480360381019061020e91906128b7565b610605565b6040516102209190612921565b60405180910390f35b610243600480360381019061023e9190612964565b610647565b005b61024d61075d565b60405161025a91906129b1565b60405180910390f35b61027d600480360381019061027891906129ca565b610769565b005b61029960048036038101906102949190612964565b6107c9565b6040516102a691906129b1565b60405180910390f35b6102c960048036038101906102c49190612b46565b610869565b005b6102e560048036038101906102e091906129ca565b610912565b005b61030160048036038101906102fc91906128b7565b610931565b005b61031d600480360381019061031891906128b7565b610a55565b60405161032a91906129b1565b60405180910390f35b61033b610ac3565b6040516103489190612864565b60405180910390f35b61036b600480360381019061036691906128b7565b610b00565b6040516103789190612921565b60405180910390f35b61039b60048036038101906103969190612b8d565b610b84565b6040516103a891906129b1565b60405180910390f35b6103cb60048036038101906103c69190612b8d565b610c4b565b6040516103d891906129b1565b60405180910390f35b6103e9610cff565b005b61040560048036038101906104009190612b8d565b610d12565b6040516104129190612c6f565b60405180910390f35b610423610e16565b6040516104309190612921565b60405180910390f35b610441610e3e565b60405161044e9190612864565b60405180910390f35b610471600480360381019061046c9190612cb9565b610ece565b005b61048d60048036038101906104889190612d95565b610ee4565b005b6104a960048036038101906104a491906128b7565b610f46565b6040516104b69190612864565b60405180910390f35b6104c7610fab565b6040516104d49190612864565b60405180910390f35b6104f760048036038101906104f29190612e15565b611037565b60405161050491906127c1565b60405180910390f35b6105156110c5565b60405161052291906129b1565b60405180910390f35b61054560048036038101906105409190612b8d565b6110cb565b005b61054f61114d565b60405161055c9190612921565b60405180910390f35b5f61056f82611172565b9050919050565b60605f805461058490612e80565b80601f01602080910402602001604051908101604052809291908181526020018280546105b090612e80565b80156105fb5780601f106105d2576101008083540402835291602001916105fb565b820191905f5260205f20905b8154815290600101906020018083116105de57829003601f168201915b5050505050905090565b5f61060f826111eb565b60045f8381526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b5f61065182610b00565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036106c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b890612f20565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166106e0611236565b73ffffffffffffffffffffffffffffffffffffffff16148061070f575061070e81610709611236565b611037565b5b61074e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074590612fae565b60405180910390fd5b610758838361123d565b505050565b5f600980549050905090565b61077a610774611236565b826112f3565b6107b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b09061303c565b60405180910390fd5b6107c4838383611387565b505050565b5f6107d383610c4b565b8210610814576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080b906130ca565b60405180910390fd5b60075f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8381526020019081526020015f2054905092915050565b610871611236565b73ffffffffffffffffffffffffffffffffffffffff16600c5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146108ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f690613158565b60405180910390fd5b80600d908161090e9190613313565b5050565b61092c83838360405180602001604052805f815250610ee4565b505050565b610939611236565b73ffffffffffffffffffffffffffffffffffffffff16600c5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146109c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109be90613158565b60405180910390fd5b5f6109d182610b00565b90506109db611236565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610a48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3f9061342c565b60405180910390fd5b610a5182611673565b5050565b5f610a5e61075d565b8210610a9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a96906134ba565b60405180910390fd5b60098281548110610ab357610ab26134d8565b5b905f5260205f2001549050919050565b60606040518060400160405280600181526020017f3100000000000000000000000000000000000000000000000000000000000000815250905090565b5f80610b0b836117b4565b90505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610b7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b729061354f565b60405180910390fd5b80915050919050565b5f610b8d611236565b73ffffffffffffffffffffffffffffffffffffffff16600c5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610c1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1290613158565b60405180910390fd5b5f600b549050610c2b83826117ed565b600b5f815480929190610c3d9061359a565b919050555080915050919050565b5f8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610cba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb190613651565b60405180910390fd5b60035f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b610d07611a00565b610d105f611a7e565b565b60605f610d1e83610c4b565b90505f8103610d78575f67ffffffffffffffff811115610d4157610d40612a22565b5b604051908082528060200260200182016040528015610d6f5781602001602082028036833780820191505090505b50915050610e11565b5f8167ffffffffffffffff811115610d9357610d92612a22565b5b604051908082528060200260200182016040528015610dc15781602001602082028036833780820191505090505b5090505f5b82811015610e0a57610dd885826107c9565b828281518110610deb57610dea6134d8565b5b6020026020010181815250508080610e029061359a565b915050610dc6565b5080925050505b919050565b5f60065f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060018054610e4d90612e80565b80601f0160208091040260200160405190810160405280929190818152602001828054610e7990612e80565b8015610ec45780601f10610e9b57610100808354040283529160200191610ec4565b820191905f5260205f20905b815481529060010190602001808311610ea757829003601f168201915b5050505050905090565b610ee0610ed9611236565b8383611b41565b5050565b610ef5610eef611236565b836112f3565b610f34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2b9061303c565b60405180910390fd5b610f4084848484611ca8565b50505050565b6060610f51826111eb565b5f610f5a611d04565b90505f815111610f785760405180602001604052805f815250610fa3565b80610f8284611d94565b604051602001610f939291906136a9565b6040516020818303038152906040525b915050919050565b600d8054610fb890612e80565b80601f0160208091040260200160405190810160405280929190818152602001828054610fe490612e80565b801561102f5780601f106110065761010080835404028352916020019161102f565b820191905f5260205f20905b81548152906001019060200180831161101257829003601f168201915b505050505081565b5f60055f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b600b5481565b6110d3611a00565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611141576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111389061373c565b60405180910390fd5b61114a81611a7e565b50565b600c5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f7f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806111e457506111e382611e5e565b5b9050919050565b6111f481611f3f565b611233576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122a906137a4565b60405180910390fd5b50565b5f33905090565b8160045f8381526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166112ad83610b00565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b5f806112fe83610b00565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611340575061133f8185611037565b5b8061137e57508373ffffffffffffffffffffffffffffffffffffffff1661136684610605565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166113a782610b00565b73ffffffffffffffffffffffffffffffffffffffff16146113fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113f490613832565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361146b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611462906138c0565b60405180910390fd5b6114788383836001611f7f565b8273ffffffffffffffffffffffffffffffffffffffff1661149882610b00565b73ffffffffffffffffffffffffffffffffffffffff16146114ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114e590613832565b60405180910390fd5b60045f8281526020019081526020015f205f6101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600160035f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8282540392505081905550600160035f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055508160025f8381526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461166e83838360016120da565b505050565b5f61167d82610b00565b905061168c815f846001611f7f565b61169582610b00565b905060045f8381526020019081526020015f205f6101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600160035f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f828254039250508190555060025f8381526020019081526020015f205f6101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055815f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46117b0815f8460016120da565b5050565b5f60025f8381526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361185b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161185290613928565b60405180910390fd5b61186481611f3f565b156118a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161189b90613990565b60405180910390fd5b6118b15f83836001611f7f565b6118ba81611f3f565b156118fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f190613990565b60405180910390fd5b600160035f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055508160025f8381526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff165f73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46119fc5f838360016120da565b5050565b611a08611236565b73ffffffffffffffffffffffffffffffffffffffff16611a26610e16565b73ffffffffffffffffffffffffffffffffffffffff1614611a7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a73906139f8565b60405180910390fd5b565b5f60065f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160065f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611baf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ba690613a60565b60405180910390fd5b8060055f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611c9b91906127c1565b60405180910390a3505050565b611cb3848484611387565b611cbf848484846120e0565b611cfe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cf590613aee565b60405180910390fd5b50505050565b6060600d8054611d1390612e80565b80601f0160208091040260200160405190810160405280929190818152602001828054611d3f90612e80565b8015611d8a5780601f10611d6157610100808354040283529160200191611d8a565b820191905f5260205f20905b815481529060010190602001808311611d6d57829003601f168201915b5050505050905090565b60605f6001611da284612262565b0190505f8167ffffffffffffffff811115611dc057611dbf612a22565b5b6040519080825280601f01601f191660200182016040528015611df25781602001600182028036833780820191505090505b5090505f82602001820190505b600115611e53578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581611e4857611e47613b0c565b5b0494505f8503611dff575b819350505050919050565b5f7f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611f2857507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80611f385750611f37826123b3565b5b9050919050565b5f8073ffffffffffffffffffffffffffffffffffffffff16611f60836117b4565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b611f8b8484848461241c565b6001811115611fcf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fc690613ba9565b60405180910390fd5b5f8290505f73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16036120145761200f81612422565b612053565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614612052576120518582612466565b5b5b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036120945761208f816125bc565b6120d3565b8473ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146120d2576120d1848261267c565b5b5b5050505050565b50505050565b5f6121008473ffffffffffffffffffffffffffffffffffffffff166126f4565b15612255578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612129611236565b8786866040518563ffffffff1660e01b815260040161214b9493929190613c19565b6020604051808303815f875af192505050801561218657506040513d601f19601f820116820180604052508101906121839190613c77565b60015b612205573d805f81146121b4576040519150601f19603f3d011682016040523d82523d5f602084013e6121b9565b606091505b505f8151036121fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121f490613aee565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505061225a565b600190505b949350505050565b5f805f90507a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106122be577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816122b4576122b3613b0c565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106122fb576d04ee2d6d415b85acef810000000083816122f1576122f0613b0c565b5b0492506020810190505b662386f26fc10000831061232a57662386f26fc1000083816123205761231f613b0c565b5b0492506010810190505b6305f5e1008310612353576305f5e100838161234957612348613b0c565b5b0492506008810190505b612710831061237857612710838161236e5761236d613b0c565b5b0492506004810190505b6064831061239b576064838161239157612390613b0c565b5b0492506002810190505b600a83106123aa576001810190505b80915050919050565b5f7f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b50505050565b600980549050600a5f8381526020019081526020015f2081905550600981908060018154018082558091505060019003905f5260205f20015f909190919091505550565b5f600161247284610c4b565b61247c9190613ca2565b90505f60085f8481526020019081526020015f20549050818114612553575f60075f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8481526020019081526020015f205490508060075f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8481526020019081526020015f20819055508160085f8381526020019081526020015f2081905550505b60085f8481526020019081526020015f205f905560075f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8381526020019081526020015f205f905550505050565b5f60016009805490506125cf9190613ca2565b90505f600a5f8481526020019081526020015f205490505f600983815481106125fb576125fa6134d8565b5b905f5260205f2001549050806009838154811061261b5761261a6134d8565b5b905f5260205f20018190555081600a5f8381526020019081526020015f2081905550600a5f8581526020019081526020015f205f9055600980548061266357612662613cd5565b5b600190038181905f5260205f20015f9055905550505050565b5f61268683610c4b565b90508160075f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8381526020019081526020015f20819055508060085f8481526020019081526020015f2081905550505050565b5f808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b5f604051905090565b5f80fd5b5f80fd5b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61275b81612727565b8114612765575f80fd5b50565b5f8135905061277681612752565b92915050565b5f602082840312156127915761279061271f565b5b5f61279e84828501612768565b91505092915050565b5f8115159050919050565b6127bb816127a7565b82525050565b5f6020820190506127d45f8301846127b2565b92915050565b5f81519050919050565b5f82825260208201905092915050565b5f5b838110156128115780820151818401526020810190506127f6565b5f8484015250505050565b5f601f19601f8301169050919050565b5f612836826127da565b61284081856127e4565b93506128508185602086016127f4565b6128598161281c565b840191505092915050565b5f6020820190508181035f83015261287c818461282c565b905092915050565b5f819050919050565b61289681612884565b81146128a0575f80fd5b50565b5f813590506128b18161288d565b92915050565b5f602082840312156128cc576128cb61271f565b5b5f6128d9848285016128a3565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61290b826128e2565b9050919050565b61291b81612901565b82525050565b5f6020820190506129345f830184612912565b92915050565b61294381612901565b811461294d575f80fd5b50565b5f8135905061295e8161293a565b92915050565b5f806040838503121561297a5761297961271f565b5b5f61298785828601612950565b9250506020612998858286016128a3565b9150509250929050565b6129ab81612884565b82525050565b5f6020820190506129c45f8301846129a2565b92915050565b5f805f606084860312156129e1576129e061271f565b5b5f6129ee86828701612950565b93505060206129ff86828701612950565b9250506040612a10868287016128a3565b9150509250925092565b5f80fd5b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b612a588261281c565b810181811067ffffffffffffffff82111715612a7757612a76612a22565b5b80604052505050565b5f612a89612716565b9050612a958282612a4f565b919050565b5f67ffffffffffffffff821115612ab457612ab3612a22565b5b612abd8261281c565b9050602081019050919050565b828183375f83830152505050565b5f612aea612ae584612a9a565b612a80565b905082815260208101848484011115612b0657612b05612a1e565b5b612b11848285612aca565b509392505050565b5f82601f830112612b2d57612b2c612a1a565b5b8135612b3d848260208601612ad8565b91505092915050565b5f60208284031215612b5b57612b5a61271f565b5b5f82013567ffffffffffffffff811115612b7857612b77612723565b5b612b8484828501612b19565b91505092915050565b5f60208284031215612ba257612ba161271f565b5b5f612baf84828501612950565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b612bea81612884565b82525050565b5f612bfb8383612be1565b60208301905092915050565b5f602082019050919050565b5f612c1d82612bb8565b612c278185612bc2565b9350612c3283612bd2565b805f5b83811015612c62578151612c498882612bf0565b9750612c5483612c07565b925050600181019050612c35565b5085935050505092915050565b5f6020820190508181035f830152612c878184612c13565b905092915050565b612c98816127a7565b8114612ca2575f80fd5b50565b5f81359050612cb381612c8f565b92915050565b5f8060408385031215612ccf57612cce61271f565b5b5f612cdc85828601612950565b9250506020612ced85828601612ca5565b9150509250929050565b5f67ffffffffffffffff821115612d1157612d10612a22565b5b612d1a8261281c565b9050602081019050919050565b5f612d39612d3484612cf7565b612a80565b905082815260208101848484011115612d5557612d54612a1e565b5b612d60848285612aca565b509392505050565b5f82601f830112612d7c57612d7b612a1a565b5b8135612d8c848260208601612d27565b91505092915050565b5f805f8060808587031215612dad57612dac61271f565b5b5f612dba87828801612950565b9450506020612dcb87828801612950565b9350506040612ddc878288016128a3565b925050606085013567ffffffffffffffff811115612dfd57612dfc612723565b5b612e0987828801612d68565b91505092959194509250565b5f8060408385031215612e2b57612e2a61271f565b5b5f612e3885828601612950565b9250506020612e4985828601612950565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680612e9757607f821691505b602082108103612eaa57612ea9612e53565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e655f8201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b5f612f0a6021836127e4565b9150612f1582612eb0565b604082019050919050565b5f6020820190508181035f830152612f3781612efe565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f5f8201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b5f612f98603d836127e4565b9150612fa382612f3e565b604082019050919050565b5f6020820190508181035f830152612fc581612f8c565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e655f8201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b5f613026602d836127e4565b915061303182612fcc565b604082019050919050565b5f6020820190508181035f8301526130538161301a565b9050919050565b7f455243373231456e756d657261626c653a206f776e657220696e646578206f755f8201527f74206f6620626f756e6473000000000000000000000000000000000000000000602082015250565b5f6130b4602b836127e4565b91506130bf8261305a565b604082019050919050565b5f6020820190508181035f8301526130e1816130a8565b9050919050565b7f46617261776179204e46543a2063616c6c6572206973206e6f742074686520635f8201527f6f6e74726f6c6c65720000000000000000000000000000000000000000000000602082015250565b5f6131426029836127e4565b915061314d826130e8565b604082019050919050565b5f6020820190508181035f83015261316f81613136565b9050919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026131d27fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613197565b6131dc8683613197565b95508019841693508086168417925050509392505050565b5f819050919050565b5f61321761321261320d84612884565b6131f4565b612884565b9050919050565b5f819050919050565b613230836131fd565b61324461323c8261321e565b8484546131a3565b825550505050565b5f90565b61325861324c565b613263818484613227565b505050565b5b818110156132865761327b5f82613250565b600181019050613269565b5050565b601f8211156132cb5761329c81613176565b6132a584613188565b810160208510156132b4578190505b6132c86132c085613188565b830182613268565b50505b505050565b5f82821c905092915050565b5f6132eb5f19846008026132d0565b1980831691505092915050565b5f61330383836132dc565b9150826002028217905092915050565b61331c826127da565b67ffffffffffffffff81111561333557613334612a22565b5b61333f8254612e80565b61334a82828561328a565b5f60209050601f83116001811461337b575f8415613369578287015190505b61337385826132f8565b8655506133da565b601f19841661338986613176565b5f5b828110156133b05784890151825560018201915060208501945060208101905061338b565b868310156133cd57848901516133c9601f8916826132dc565b8355505b6001600288020188555050505b505050505050565b7f46617261776179204e46543a206e6f74206f776e6572000000000000000000005f82015250565b5f6134166016836127e4565b9150613421826133e2565b602082019050919050565b5f6020820190508181035f8301526134438161340a565b9050919050565b7f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f5f8201527f7574206f6620626f756e64730000000000000000000000000000000000000000602082015250565b5f6134a4602c836127e4565b91506134af8261344a565b604082019050919050565b5f6020820190508181035f8301526134d181613498565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f4552433732313a20696e76616c696420746f6b656e20494400000000000000005f82015250565b5f6135396018836127e4565b915061354482613505565b602082019050919050565b5f6020820190508181035f8301526135668161352d565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6135a482612884565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036135d6576135d561356d565b5b600182019050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f7420612076615f8201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b5f61363b6029836127e4565b9150613646826135e1565b604082019050919050565b5f6020820190508181035f8301526136688161362f565b9050919050565b5f81905092915050565b5f613683826127da565b61368d818561366f565b935061369d8185602086016127f4565b80840191505092915050565b5f6136b48285613679565b91506136c08284613679565b91508190509392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f20615f8201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b5f6137266026836127e4565b9150613731826136cc565b604082019050919050565b5f6020820190508181035f8301526137538161371a565b9050919050565b7f46617261776179204e46543a20696e76616c696420746f6b656e2049440000005f82015250565b5f61378e601d836127e4565b91506137998261375a565b602082019050919050565b5f6020820190508181035f8301526137bb81613782565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f7272656374205f8201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b5f61381c6025836127e4565b9150613827826137c2565b604082019050919050565b5f6020820190508181035f83015261384981613810565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f206164645f8201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b5f6138aa6024836127e4565b91506138b582613850565b604082019050919050565b5f6020820190508181035f8301526138d78161389e565b9050919050565b7f4552433732313a206d696e7420746f20746865207a65726f20616464726573735f82015250565b5f6139126020836127e4565b915061391d826138de565b602082019050919050565b5f6020820190508181035f83015261393f81613906565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e746564000000005f82015250565b5f61397a601c836127e4565b915061398582613946565b602082019050919050565b5f6020820190508181035f8301526139a78161396e565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725f82015250565b5f6139e26020836127e4565b91506139ed826139ae565b602082019050919050565b5f6020820190508181035f830152613a0f816139d6565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c6572000000000000005f82015250565b5f613a4a6019836127e4565b9150613a5582613a16565b602082019050919050565b5f6020820190508181035f830152613a7781613a3e565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e2045524337323152655f8201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b5f613ad86032836127e4565b9150613ae382613a7e565b604082019050919050565b5f6020820190508181035f830152613b0581613acc565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b7f455243373231456e756d657261626c653a20636f6e73656375746976652074725f8201527f616e7366657273206e6f7420737570706f727465640000000000000000000000602082015250565b5f613b936035836127e4565b9150613b9e82613b39565b604082019050919050565b5f6020820190508181035f830152613bc081613b87565b9050919050565b5f81519050919050565b5f82825260208201905092915050565b5f613beb82613bc7565b613bf58185613bd1565b9350613c058185602086016127f4565b613c0e8161281c565b840191505092915050565b5f608082019050613c2c5f830187612912565b613c396020830186612912565b613c4660408301856129a2565b8181036060830152613c588184613be1565b905095945050505050565b5f81519050613c7181612752565b92915050565b5f60208284031215613c8c57613c8b61271f565b5b5f613c9984828501613c63565b91505092915050565b5f613cac82612884565b9150613cb783612884565b9250828203905081811115613ccf57613cce61356d565b5b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603160045260245ffdfea2646970667358221220ec892af816539b638c4e9f8fa9e75a11a8c4f704f18cb50fb770a08bddaded8964736f6c63430008140033a2646970667358221220e51bcc3c8392776e6a7beca1a5586bff13568ea0a3056d46d0e93955b368c29764736f6c63430008140033",
}

// CheckchainABI is the input ABI used to generate the binding from.
// Deprecated: Use CheckchainMetaData.ABI instead.
var CheckchainABI = CheckchainMetaData.ABI

// CheckchainBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use CheckchainMetaData.Bin instead.
var CheckchainBin = CheckchainMetaData.Bin

// DeployCheckchain deploys a new Ethereum contract, binding an instance of Checkchain to it.
func DeployCheckchain(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Checkchain, error) {
	parsed, err := CheckchainMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CheckchainBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Checkchain{CheckchainCaller: CheckchainCaller{contract: contract}, CheckchainTransactor: CheckchainTransactor{contract: contract}, CheckchainFilterer: CheckchainFilterer{contract: contract}}, nil
}

// Checkchain is an auto generated Go binding around an Ethereum contract.
type Checkchain struct {
	CheckchainCaller     // Read-only binding to the contract
	CheckchainTransactor // Write-only binding to the contract
	CheckchainFilterer   // Log filterer for contract events
}

// CheckchainCaller is an auto generated read-only Go binding around an Ethereum contract.
type CheckchainCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CheckchainTransactor is an auto generated write-only Go binding around an Ethereum contract.
type CheckchainTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CheckchainFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CheckchainFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CheckchainSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CheckchainSession struct {
	Contract     *Checkchain       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CheckchainCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CheckchainCallerSession struct {
	Contract *CheckchainCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// CheckchainTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CheckchainTransactorSession struct {
	Contract     *CheckchainTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// CheckchainRaw is an auto generated low-level Go binding around an Ethereum contract.
type CheckchainRaw struct {
	Contract *Checkchain // Generic contract binding to access the raw methods on
}

// CheckchainCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CheckchainCallerRaw struct {
	Contract *CheckchainCaller // Generic read-only contract binding to access the raw methods on
}

// CheckchainTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CheckchainTransactorRaw struct {
	Contract *CheckchainTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCheckchain creates a new instance of Checkchain, bound to a specific deployed contract.
func NewCheckchain(address common.Address, backend bind.ContractBackend) (*Checkchain, error) {
	contract, err := bindCheckchain(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Checkchain{CheckchainCaller: CheckchainCaller{contract: contract}, CheckchainTransactor: CheckchainTransactor{contract: contract}, CheckchainFilterer: CheckchainFilterer{contract: contract}}, nil
}

// NewCheckchainCaller creates a new read-only instance of Checkchain, bound to a specific deployed contract.
func NewCheckchainCaller(address common.Address, caller bind.ContractCaller) (*CheckchainCaller, error) {
	contract, err := bindCheckchain(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CheckchainCaller{contract: contract}, nil
}

// NewCheckchainTransactor creates a new write-only instance of Checkchain, bound to a specific deployed contract.
func NewCheckchainTransactor(address common.Address, transactor bind.ContractTransactor) (*CheckchainTransactor, error) {
	contract, err := bindCheckchain(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CheckchainTransactor{contract: contract}, nil
}

// NewCheckchainFilterer creates a new log filterer instance of Checkchain, bound to a specific deployed contract.
func NewCheckchainFilterer(address common.Address, filterer bind.ContractFilterer) (*CheckchainFilterer, error) {
	contract, err := bindCheckchain(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CheckchainFilterer{contract: contract}, nil
}

// bindCheckchain binds a generic wrapper to an already deployed contract.
func bindCheckchain(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := CheckchainMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Checkchain *CheckchainRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Checkchain.Contract.CheckchainCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Checkchain *CheckchainRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Checkchain.Contract.CheckchainTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Checkchain *CheckchainRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Checkchain.Contract.CheckchainTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Checkchain *CheckchainCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Checkchain.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Checkchain *CheckchainTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Checkchain.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Checkchain *CheckchainTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Checkchain.Contract.contract.Transact(opts, method, params...)
}

// GetCollections is a free data retrieval call binding the contract method 0x46e63586.
//
// Solidity: function getCollections() view returns(address[] members)
func (_Checkchain *CheckchainCaller) GetCollections(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _Checkchain.contract.Call(opts, &out, "getCollections")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetCollections is a free data retrieval call binding the contract method 0x46e63586.
//
// Solidity: function getCollections() view returns(address[] members)
func (_Checkchain *CheckchainSession) GetCollections() ([]common.Address, error) {
	return _Checkchain.Contract.GetCollections(&_Checkchain.CallOpts)
}

// GetCollections is a free data retrieval call binding the contract method 0x46e63586.
//
// Solidity: function getCollections() view returns(address[] members)
func (_Checkchain *CheckchainCallerSession) GetCollections() ([]common.Address, error) {
	return _Checkchain.Contract.GetCollections(&_Checkchain.CallOpts)
}

// IsCollection is a free data retrieval call binding the contract method 0x5fa15ebb.
//
// Solidity: function isCollection(address _collection) view returns(bool)
func (_Checkchain *CheckchainCaller) IsCollection(opts *bind.CallOpts, _collection common.Address) (bool, error) {
	var out []interface{}
	err := _Checkchain.contract.Call(opts, &out, "isCollection", _collection)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsCollection is a free data retrieval call binding the contract method 0x5fa15ebb.
//
// Solidity: function isCollection(address _collection) view returns(bool)
func (_Checkchain *CheckchainSession) IsCollection(_collection common.Address) (bool, error) {
	return _Checkchain.Contract.IsCollection(&_Checkchain.CallOpts, _collection)
}

// IsCollection is a free data retrieval call binding the contract method 0x5fa15ebb.
//
// Solidity: function isCollection(address _collection) view returns(bool)
func (_Checkchain *CheckchainCallerSession) IsCollection(_collection common.Address) (bool, error) {
	return _Checkchain.Contract.IsCollection(&_Checkchain.CallOpts, _collection)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Checkchain *CheckchainCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Checkchain.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Checkchain *CheckchainSession) Owner() (common.Address, error) {
	return _Checkchain.Contract.Owner(&_Checkchain.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Checkchain *CheckchainCallerSession) Owner() (common.Address, error) {
	return _Checkchain.Contract.Owner(&_Checkchain.CallOpts)
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address _collection, uint256 _tokenId) returns()
func (_Checkchain *CheckchainTransactor) Burn(opts *bind.TransactOpts, _collection common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _Checkchain.contract.Transact(opts, "burn", _collection, _tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address _collection, uint256 _tokenId) returns()
func (_Checkchain *CheckchainSession) Burn(_collection common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _Checkchain.Contract.Burn(&_Checkchain.TransactOpts, _collection, _tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address _collection, uint256 _tokenId) returns()
func (_Checkchain *CheckchainTransactorSession) Burn(_collection common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _Checkchain.Contract.Burn(&_Checkchain.TransactOpts, _collection, _tokenId)
}

// CreateCollection is a paid mutator transaction binding the contract method 0xece86c21.
//
// Solidity: function createCollection(string _name, string _symbol, string _baseTokenURI) returns()
func (_Checkchain *CheckchainTransactor) CreateCollection(opts *bind.TransactOpts, _name string, _symbol string, _baseTokenURI string) (*types.Transaction, error) {
	return _Checkchain.contract.Transact(opts, "createCollection", _name, _symbol, _baseTokenURI)
}

// CreateCollection is a paid mutator transaction binding the contract method 0xece86c21.
//
// Solidity: function createCollection(string _name, string _symbol, string _baseTokenURI) returns()
func (_Checkchain *CheckchainSession) CreateCollection(_name string, _symbol string, _baseTokenURI string) (*types.Transaction, error) {
	return _Checkchain.Contract.CreateCollection(&_Checkchain.TransactOpts, _name, _symbol, _baseTokenURI)
}

// CreateCollection is a paid mutator transaction binding the contract method 0xece86c21.
//
// Solidity: function createCollection(string _name, string _symbol, string _baseTokenURI) returns()
func (_Checkchain *CheckchainTransactorSession) CreateCollection(_name string, _symbol string, _baseTokenURI string) (*types.Transaction, error) {
	return _Checkchain.Contract.CreateCollection(&_Checkchain.TransactOpts, _name, _symbol, _baseTokenURI)
}

// Mint is a paid mutator transaction binding the contract method 0xee1fe2ad.
//
// Solidity: function mint(address _collection, address _owner) payable returns()
func (_Checkchain *CheckchainTransactor) Mint(opts *bind.TransactOpts, _collection common.Address, _owner common.Address) (*types.Transaction, error) {
	return _Checkchain.contract.Transact(opts, "mint", _collection, _owner)
}

// Mint is a paid mutator transaction binding the contract method 0xee1fe2ad.
//
// Solidity: function mint(address _collection, address _owner) payable returns()
func (_Checkchain *CheckchainSession) Mint(_collection common.Address, _owner common.Address) (*types.Transaction, error) {
	return _Checkchain.Contract.Mint(&_Checkchain.TransactOpts, _collection, _owner)
}

// Mint is a paid mutator transaction binding the contract method 0xee1fe2ad.
//
// Solidity: function mint(address _collection, address _owner) payable returns()
func (_Checkchain *CheckchainTransactorSession) Mint(_collection common.Address, _owner common.Address) (*types.Transaction, error) {
	return _Checkchain.Contract.Mint(&_Checkchain.TransactOpts, _collection, _owner)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Checkchain *CheckchainTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Checkchain.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Checkchain *CheckchainSession) RenounceOwnership() (*types.Transaction, error) {
	return _Checkchain.Contract.RenounceOwnership(&_Checkchain.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Checkchain *CheckchainTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Checkchain.Contract.RenounceOwnership(&_Checkchain.TransactOpts)
}

// SetBaseTokenURI is a paid mutator transaction binding the contract method 0xd8a73fdb.
//
// Solidity: function setBaseTokenURI(address _collection, string _baseTokenURI) returns()
func (_Checkchain *CheckchainTransactor) SetBaseTokenURI(opts *bind.TransactOpts, _collection common.Address, _baseTokenURI string) (*types.Transaction, error) {
	return _Checkchain.contract.Transact(opts, "setBaseTokenURI", _collection, _baseTokenURI)
}

// SetBaseTokenURI is a paid mutator transaction binding the contract method 0xd8a73fdb.
//
// Solidity: function setBaseTokenURI(address _collection, string _baseTokenURI) returns()
func (_Checkchain *CheckchainSession) SetBaseTokenURI(_collection common.Address, _baseTokenURI string) (*types.Transaction, error) {
	return _Checkchain.Contract.SetBaseTokenURI(&_Checkchain.TransactOpts, _collection, _baseTokenURI)
}

// SetBaseTokenURI is a paid mutator transaction binding the contract method 0xd8a73fdb.
//
// Solidity: function setBaseTokenURI(address _collection, string _baseTokenURI) returns()
func (_Checkchain *CheckchainTransactorSession) SetBaseTokenURI(_collection common.Address, _baseTokenURI string) (*types.Transaction, error) {
	return _Checkchain.Contract.SetBaseTokenURI(&_Checkchain.TransactOpts, _collection, _baseTokenURI)
}

// SetCollectionPrice is a paid mutator transaction binding the contract method 0x804695af.
//
// Solidity: function setCollectionPrice(address _collection, uint256 _newPrice) returns()
func (_Checkchain *CheckchainTransactor) SetCollectionPrice(opts *bind.TransactOpts, _collection common.Address, _newPrice *big.Int) (*types.Transaction, error) {
	return _Checkchain.contract.Transact(opts, "setCollectionPrice", _collection, _newPrice)
}

// SetCollectionPrice is a paid mutator transaction binding the contract method 0x804695af.
//
// Solidity: function setCollectionPrice(address _collection, uint256 _newPrice) returns()
func (_Checkchain *CheckchainSession) SetCollectionPrice(_collection common.Address, _newPrice *big.Int) (*types.Transaction, error) {
	return _Checkchain.Contract.SetCollectionPrice(&_Checkchain.TransactOpts, _collection, _newPrice)
}

// SetCollectionPrice is a paid mutator transaction binding the contract method 0x804695af.
//
// Solidity: function setCollectionPrice(address _collection, uint256 _newPrice) returns()
func (_Checkchain *CheckchainTransactorSession) SetCollectionPrice(_collection common.Address, _newPrice *big.Int) (*types.Transaction, error) {
	return _Checkchain.Contract.SetCollectionPrice(&_Checkchain.TransactOpts, _collection, _newPrice)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Checkchain *CheckchainTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Checkchain.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Checkchain *CheckchainSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Checkchain.Contract.TransferOwnership(&_Checkchain.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Checkchain *CheckchainTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Checkchain.Contract.TransferOwnership(&_Checkchain.TransactOpts, newOwner)
}

// CheckchainCollectionCreatedIterator is returned from FilterCollectionCreated and is used to iterate over the raw logs and unpacked data for CollectionCreated events raised by the Checkchain contract.
type CheckchainCollectionCreatedIterator struct {
	Event *CheckchainCollectionCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CheckchainCollectionCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CheckchainCollectionCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CheckchainCollectionCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CheckchainCollectionCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CheckchainCollectionCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CheckchainCollectionCreated represents a CollectionCreated event raised by the Checkchain contract.
type CheckchainCollectionCreated struct {
	Collection common.Address
	Name       string
	Symbol     string
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterCollectionCreated is a free log retrieval operation binding the contract event 0x3454b57f2dca4f5a54e8358d096ac9d1a0d2dab98991ddb89ff9ea1746260617.
//
// Solidity: event CollectionCreated(address collection, string name, string symbol)
func (_Checkchain *CheckchainFilterer) FilterCollectionCreated(opts *bind.FilterOpts) (*CheckchainCollectionCreatedIterator, error) {

	logs, sub, err := _Checkchain.contract.FilterLogs(opts, "CollectionCreated")
	if err != nil {
		return nil, err
	}
	return &CheckchainCollectionCreatedIterator{contract: _Checkchain.contract, event: "CollectionCreated", logs: logs, sub: sub}, nil
}

// WatchCollectionCreated is a free log subscription operation binding the contract event 0x3454b57f2dca4f5a54e8358d096ac9d1a0d2dab98991ddb89ff9ea1746260617.
//
// Solidity: event CollectionCreated(address collection, string name, string symbol)
func (_Checkchain *CheckchainFilterer) WatchCollectionCreated(opts *bind.WatchOpts, sink chan<- *CheckchainCollectionCreated) (event.Subscription, error) {

	logs, sub, err := _Checkchain.contract.WatchLogs(opts, "CollectionCreated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CheckchainCollectionCreated)
				if err := _Checkchain.contract.UnpackLog(event, "CollectionCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCollectionCreated is a log parse operation binding the contract event 0x3454b57f2dca4f5a54e8358d096ac9d1a0d2dab98991ddb89ff9ea1746260617.
//
// Solidity: event CollectionCreated(address collection, string name, string symbol)
func (_Checkchain *CheckchainFilterer) ParseCollectionCreated(log types.Log) (*CheckchainCollectionCreated, error) {
	event := new(CheckchainCollectionCreated)
	if err := _Checkchain.contract.UnpackLog(event, "CollectionCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CheckchainOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Checkchain contract.
type CheckchainOwnershipTransferredIterator struct {
	Event *CheckchainOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CheckchainOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CheckchainOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CheckchainOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CheckchainOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CheckchainOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CheckchainOwnershipTransferred represents a OwnershipTransferred event raised by the Checkchain contract.
type CheckchainOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Checkchain *CheckchainFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*CheckchainOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Checkchain.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &CheckchainOwnershipTransferredIterator{contract: _Checkchain.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Checkchain *CheckchainFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *CheckchainOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Checkchain.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CheckchainOwnershipTransferred)
				if err := _Checkchain.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Checkchain *CheckchainFilterer) ParseOwnershipTransferred(log types.Log) (*CheckchainOwnershipTransferred, error) {
	event := new(CheckchainOwnershipTransferred)
	if err := _Checkchain.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CheckchainPriceUpdatedIterator is returned from FilterPriceUpdated and is used to iterate over the raw logs and unpacked data for PriceUpdated events raised by the Checkchain contract.
type CheckchainPriceUpdatedIterator struct {
	Event *CheckchainPriceUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CheckchainPriceUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CheckchainPriceUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CheckchainPriceUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CheckchainPriceUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CheckchainPriceUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CheckchainPriceUpdated represents a PriceUpdated event raised by the Checkchain contract.
type CheckchainPriceUpdated struct {
	Collection common.Address
	OldPrice   *big.Int
	NewPrice   *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterPriceUpdated is a free log retrieval operation binding the contract event 0xb556fac599c3c70efb9ab1fa725ecace6c81cc48d1455f886607def065f3e0c0.
//
// Solidity: event PriceUpdated(address collection, uint256 oldPrice, uint256 newPrice)
func (_Checkchain *CheckchainFilterer) FilterPriceUpdated(opts *bind.FilterOpts) (*CheckchainPriceUpdatedIterator, error) {

	logs, sub, err := _Checkchain.contract.FilterLogs(opts, "PriceUpdated")
	if err != nil {
		return nil, err
	}
	return &CheckchainPriceUpdatedIterator{contract: _Checkchain.contract, event: "PriceUpdated", logs: logs, sub: sub}, nil
}

// WatchPriceUpdated is a free log subscription operation binding the contract event 0xb556fac599c3c70efb9ab1fa725ecace6c81cc48d1455f886607def065f3e0c0.
//
// Solidity: event PriceUpdated(address collection, uint256 oldPrice, uint256 newPrice)
func (_Checkchain *CheckchainFilterer) WatchPriceUpdated(opts *bind.WatchOpts, sink chan<- *CheckchainPriceUpdated) (event.Subscription, error) {

	logs, sub, err := _Checkchain.contract.WatchLogs(opts, "PriceUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CheckchainPriceUpdated)
				if err := _Checkchain.contract.UnpackLog(event, "PriceUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePriceUpdated is a log parse operation binding the contract event 0xb556fac599c3c70efb9ab1fa725ecace6c81cc48d1455f886607def065f3e0c0.
//
// Solidity: event PriceUpdated(address collection, uint256 oldPrice, uint256 newPrice)
func (_Checkchain *CheckchainFilterer) ParsePriceUpdated(log types.Log) (*CheckchainPriceUpdated, error) {
	event := new(CheckchainPriceUpdated)
	if err := _Checkchain.contract.UnpackLog(event, "PriceUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CheckchainTokenBurnedIterator is returned from FilterTokenBurned and is used to iterate over the raw logs and unpacked data for TokenBurned events raised by the Checkchain contract.
type CheckchainTokenBurnedIterator struct {
	Event *CheckchainTokenBurned // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CheckchainTokenBurnedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CheckchainTokenBurned)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CheckchainTokenBurned)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CheckchainTokenBurnedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CheckchainTokenBurnedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CheckchainTokenBurned represents a TokenBurned event raised by the Checkchain contract.
type CheckchainTokenBurned struct {
	Collection common.Address
	Owner      common.Address
	TokenId    *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterTokenBurned is a free log retrieval operation binding the contract event 0xbfa41556980d157c24e8632dbb78958f8759a86b4acdea421f93dc7259fb55db.
//
// Solidity: event TokenBurned(address collection, address owner, uint256 tokenId)
func (_Checkchain *CheckchainFilterer) FilterTokenBurned(opts *bind.FilterOpts) (*CheckchainTokenBurnedIterator, error) {

	logs, sub, err := _Checkchain.contract.FilterLogs(opts, "TokenBurned")
	if err != nil {
		return nil, err
	}
	return &CheckchainTokenBurnedIterator{contract: _Checkchain.contract, event: "TokenBurned", logs: logs, sub: sub}, nil
}

// WatchTokenBurned is a free log subscription operation binding the contract event 0xbfa41556980d157c24e8632dbb78958f8759a86b4acdea421f93dc7259fb55db.
//
// Solidity: event TokenBurned(address collection, address owner, uint256 tokenId)
func (_Checkchain *CheckchainFilterer) WatchTokenBurned(opts *bind.WatchOpts, sink chan<- *CheckchainTokenBurned) (event.Subscription, error) {

	logs, sub, err := _Checkchain.contract.WatchLogs(opts, "TokenBurned")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CheckchainTokenBurned)
				if err := _Checkchain.contract.UnpackLog(event, "TokenBurned", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTokenBurned is a log parse operation binding the contract event 0xbfa41556980d157c24e8632dbb78958f8759a86b4acdea421f93dc7259fb55db.
//
// Solidity: event TokenBurned(address collection, address owner, uint256 tokenId)
func (_Checkchain *CheckchainFilterer) ParseTokenBurned(log types.Log) (*CheckchainTokenBurned, error) {
	event := new(CheckchainTokenBurned)
	if err := _Checkchain.contract.UnpackLog(event, "TokenBurned", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CheckchainTokenMintedIterator is returned from FilterTokenMinted and is used to iterate over the raw logs and unpacked data for TokenMinted events raised by the Checkchain contract.
type CheckchainTokenMintedIterator struct {
	Event *CheckchainTokenMinted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CheckchainTokenMintedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CheckchainTokenMinted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CheckchainTokenMinted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CheckchainTokenMintedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CheckchainTokenMintedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CheckchainTokenMinted represents a TokenMinted event raised by the Checkchain contract.
type CheckchainTokenMinted struct {
	Collection common.Address
	Owner      common.Address
	TokenUri   string
	TokenId    *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterTokenMinted is a free log retrieval operation binding the contract event 0xf36e967fc37dc0a7e0a1e6d328aac7e945dfcadb00d552d6bc291bdc1b5f80d3.
//
// Solidity: event TokenMinted(address indexed collection, address indexed owner, string tokenUri, uint256 tokenId)
func (_Checkchain *CheckchainFilterer) FilterTokenMinted(opts *bind.FilterOpts, collection []common.Address, owner []common.Address) (*CheckchainTokenMintedIterator, error) {

	var collectionRule []interface{}
	for _, collectionItem := range collection {
		collectionRule = append(collectionRule, collectionItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _Checkchain.contract.FilterLogs(opts, "TokenMinted", collectionRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return &CheckchainTokenMintedIterator{contract: _Checkchain.contract, event: "TokenMinted", logs: logs, sub: sub}, nil
}

// WatchTokenMinted is a free log subscription operation binding the contract event 0xf36e967fc37dc0a7e0a1e6d328aac7e945dfcadb00d552d6bc291bdc1b5f80d3.
//
// Solidity: event TokenMinted(address indexed collection, address indexed owner, string tokenUri, uint256 tokenId)
func (_Checkchain *CheckchainFilterer) WatchTokenMinted(opts *bind.WatchOpts, sink chan<- *CheckchainTokenMinted, collection []common.Address, owner []common.Address) (event.Subscription, error) {

	var collectionRule []interface{}
	for _, collectionItem := range collection {
		collectionRule = append(collectionRule, collectionItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _Checkchain.contract.WatchLogs(opts, "TokenMinted", collectionRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CheckchainTokenMinted)
				if err := _Checkchain.contract.UnpackLog(event, "TokenMinted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTokenMinted is a log parse operation binding the contract event 0xf36e967fc37dc0a7e0a1e6d328aac7e945dfcadb00d552d6bc291bdc1b5f80d3.
//
// Solidity: event TokenMinted(address indexed collection, address indexed owner, string tokenUri, uint256 tokenId)
func (_Checkchain *CheckchainFilterer) ParseTokenMinted(log types.Log) (*CheckchainTokenMinted, error) {
	event := new(CheckchainTokenMinted)
	if err := _Checkchain.contract.UnpackLog(event, "TokenMinted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
